module.exports = (function() {

    'use strict';

    const path = require('path');
    const chalk = require('chalk');
    const utils = require('./util');

    const Persistence = require('./Persistence');
    const Interface = require('./Interface');
    const Manager = require('./Manager');
    const Type = require('./Type');

    /**
     * @constructor Storage
     * @param {Object} config - Basic configuration
     */
    function Storage(config) {
        this.type = Type.Storage;
        this.config = config || {};
        this.Persistence = Persistence;
        this.Manager = Manager;
        this.Adapter = null;
    };

    /**
     * Starts the app with the configuration and launch
     * the interface with the options parameter.
     * @memberof Storage
     * @param  {Object?} opts - Options for the Interface
     * @return {Interface} Public interface for usage
     */
    Storage.prototype.start = function(opts) {
        Manager.init(this.config);
        Manager.create(this.config.structure, this.config.base);
        this.attach(this.config.adapter);
        
        return new Interface(this, utils.assign(this.config, opts));
    };

    /**
     * Attaching a new Adapter to the database
     * @param  {Adapter} adapter - An instance of the Adapter
     * @return {this}
     */
    Storage.prototype.attach = function(adapter) {
        try {
            let AdapterClass = require(`./adapter/${adapter}`);
            if(typeof AdapterClass !== 'function') {
                console.log(chalk.red(`Adapter ${adapter} does not export a function`));
            } else {
                this.Adapter = new AdapterClass(this);
            }
        } catch(err) {
            console.log(chalk.red(`Couldn't attach adapter ${adapter}: ${err.message}`));
        }

        return this;
    };

    /**
     * Creates a new Storage by config
     * @function create
     * @memberof Storage
     * @param {Object} config - Storage configuration
     * @returns {Storage} New Storage instance
     */
    Storage.create = config => {
        return new Storage(config);
    };

    return Storage;
})();
