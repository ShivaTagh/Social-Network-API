module.exports = (function() {
    'use strict';

    const fs = require('fs');
    const util = require('util');
    const path = require('path');
    const chalk = require('chalk');

    const TransformJSON = require('./../transform/JSON');
    const Adapter = require('./../Adapter');

    /**
     * Default DefaultAdapter for ADStore using the
     * JSON transformer and internal fs module.
     * @private
     * @augments Adapter
     * @class DefaultAdapter
     * @param {ADStore} engine - ADStore root object
     * @param {Object} opts - Settings object
     */
    function DefaultAdapter(engine, opts) {
        this.options = opts || {};
        this.engine = engine;
    }

    util.inherits(DefaultAdapter, Adapter);

    /**
     * Reads data from a JSON file and passes it back
     * with the JSON transform parser.
     * @memberof DefaultAdapter
     * @param  {Object} opts - Settings object
     * @return {Object} Database content
     */
    DefaultAdapter.prototype.read = function(opts) {
        let self = this;
        let path = opts.path;
        let content = opts.content;

        try {
            let result = fs.readFileSync(path, 'utf8');
            return TransformJSON.parse(result);
        } catch(err) {
            if(err.code === 'ENOENT') {
                return self.write({
                    path: path,
                    content: content
                });
            }
        }
    };

    /**
     * Writes data from an Interface to the file
     * with the JSON transform converter.
     * @memberof DefaultAdapter
     * @param  {Object} opts - Settings Object
     * @return {Object|Boolean} - False if failed, otherwise the result
     */
    DefaultAdapter.prototype.write = function(opts) {
        let self = this;
        let path = opts.path;
        let content = opts.content;
        content = TransformJSON.convert(content);

        try {
            fs.writeFileSync(path, content, 'utf8');
            return self.read({
                path: path
            });
        } catch(err) {
            console.log(chalk.red(`DefaultAdapter: ${err.message}`));
            return false;
        }
    };

    return DefaultAdapter;
})();
