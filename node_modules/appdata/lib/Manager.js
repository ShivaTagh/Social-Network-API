module.exports = (function() {

    'use strict';

    const async = require('async');
    const path = require('path');
    const mkdirp = require('mkdirp');
    const chalk = require('chalk');

    const Persistence = require('./Persistence');
    const Type = require('./Type');

    /**
     * Internal bootstrap manager
     * @constructor Manager
     */
    function Manager() {
        this.type = Type.Manager;
    };

    /**
     * Initialize a new manager and bootstrap the application
     * @memberof Manager
     * @param  {Object} config - Application configuration
     * @return {this}
     */
    Manager.prototype.init = function(config) {
        if(!config) {
            console.error(chalk.red('No config provided for Manager.init ...'));
            return process.exit(1);
        }

        this.appDataBase = Persistence.getBasePath();
        this.appDataStore = Persistence.providePath(config.base);
        return this;
    };

    /**
     * Creating base structures for the database if not exists
     * and read their content and check for validity.
     * @memberof Manager
     * @param  {Object} config - Application configuration
     * @param  {String} base - Base path to the database root
     * @return {this}
     */
    Manager.prototype.create = function(config, base) {
        let structures = {
            lock: Persistence.providePath(path.join(base, config.lock)),
            cache: Persistence.providePath(path.join(base, config.cache)),
            data: Persistence.providePath(path.join(base, config.data)),
            provide: config.provide
        };

        if(Array.isArray(config.provide)) {
            config.provide.forEach(function(provider) {
                Persistence.providePath(path.join(base, provider));
            });
        }

        this.structure = structures;
        return this;
    };

    return new Manager();
})();
