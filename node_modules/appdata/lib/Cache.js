module.exports = (function() {
    'use strict';

    /**
     * Basic and simple caching mechanism
     * @class Cache
     */
    function Cache() {
        this.type = require('./Type').Cache;
        this.data = {};
        this.changed = null;
        this.last = null;
    }

    /**
     * Set a new key-value pair in the cache
     * @memberof Cache
     * @param  {String} key - Key to set
     * @param  {*} val - Value to set for key
     */
    Cache.prototype.set = function(key, val) {
        this.data[key] = val;
        this.changed = true;
        this.last = key;
    };

    /**
     * Checks if a key-value pair exists by key
     * @memberof Cache
     * @param  {String} key - Key to lookup
     * @return {Boolean}
     */
    Cache.prototype.has = function(key) {
        return this.data[key] !== undefined;
    };

    /**
     * Reads the value from an item by key
     * @memberof Cache
     * @param  {String} key - Key to lookup
     * @return {*}
     */
    Cache.prototype.get = function(key) {
        this.last = key;
        return this.data[key];
    };

    /**
     * Map all items in the cache to the resolver method
     * @memberof Cache
     * @param  {Function} resolver - Mapping function with signature [key, value, data]
     */
    Cache.prototype.map = function(resolver) {
        for(var item in this.data) {
            this.data[item] = resolver(item, this.data[item], this.data);
            this.changed = true;
            this.last = item;
        }
    };

    /**
     * Empty the changed and last chains
     * @memberof Cache
     */
    Cache.prototype.save = function() {
        this.changed = null;
        this.last = null;
    };

    /**
     * Reset the cache object with the {@link Cache#save} method
     * @memberof Cache
     */
    Cache.prototype.reset = function() {
        this.data = {};
        this.save();
    };

    return Cache;
})();
