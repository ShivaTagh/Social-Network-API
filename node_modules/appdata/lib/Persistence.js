module.exports = (function() {
    'use strict';

    const path = require('path');
    const mkdirp = require('mkdirp');
    const chalk = require('chalk');

    /**
     * Creates a new persistence manager
     * @constructor Persistence
     */
    function Persistence() {
        this.type = require('./Type').Persistence;
    };

    /**
     * Provides the main path to the AppData folder, depending
     * on the current operating system.
     * @memberof Persistence
     * @param  {String} subpath - Path to append
     * @return {String} Generated path
     */
    Persistence.providePath = function(subpath) {
        if(typeof subpath !== 'string') {
            return false;
        }

        try {
            var createPath = path.join(Persistence.getBasePath(), subpath);
            mkdirp.sync(createPath);
            return createPath;
        } catch(failed) {
            console.log(chalk.red(failed.message));
            return false;
        }
    };

    /**
     * Returns the path to the local appdata folder, depending
     * on the operating system. Supporting Win32, Win64, Darwin
     * and also Linux.
     * @memberof Persistence
     * @return {String} Path to the AppData location
     */
    Persistence.getBasePath = function() {
        var homepath;
        try {
            switch (process.platform) {
                case 'win32':
                case 'win64':
                    homepath = process.env.LOCALAPPDATA || process.env.APPDATA;
                    if (!homepath) {
                        throw 'Couldn\'t find the base application data folder';
                    }
                    break;
                case 'darwin':
                    homepath = process.env.homepath;
                    if (!homepath) {
                        throw 'Couldn\'t find the base application data directory';
                    }
                    homepath = path.join(homepath, 'Library', 'Application Support');
                    break;
                case 'linux':
                    homepath = process.env.homepath;
                    if (!homepath) {
                        throw 'Couldn\'t find the base application data directory';
                    }
                    homepath = path.join(homepath, '.config');
                    break;
                default:
                    throw 'Can\'t use the Node Webkit relative path for platform ' + process.platform;
            }
        } catch(noPath) {
            console.log(chalk.red(noPath.message ? noPath.message : noPath));
            return false;
        }

        return homepath;
    };

    return Persistence;
})();
