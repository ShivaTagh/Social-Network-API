var expect = require('chai').expect;
var assert = require('chai').assert;
var should = require('chai').should();

var TARGET_DB = 'test-interface';
var appdata = require('./../index');
var store = null;

describe('AppData', function() {

    beforeEach('connect and clean the database', function() {
        store = appdata.connect(TARGET_DB, {
            autosync: false // disable fs-sync for testing
        });

        store.drop();
    });

    // Store.use()
    describe('.use()', function() {
        it('should connect to the database', function() {
            store.on('connect', function(name, data) {
                assert.typeOf(data, 'object');
                assert.equal(name, TARGET_DB);
            });
        });
    });

    // Store.drop()
    describe('.drop()', function() {
        it('should empty the database', function() {
            store.drop();
            assert.deepEqual(store.store.data, {});
        });
    });

    // Store.sync()
    describe('.sync()', function() {
        it('should synchronize the database', function() {
            store.on('sync', function(done) {
                assert.equal(done, true);
            });

            store.sync();
        });
    });

    // Store.get(), Store.set()
    describe('.get(), set()', function() {
        it('should set values without errors in the store', function() {
            store.set('key', 'value');
            store.set('collection', [1, 2, 3, 4]);
            store.set('bool', true);

            assert.equal(store.get('key'), 'value');
            assert.lengthOf(store.get('collection'), 4, 'four items saved!');
            assert.equal(store.get('bool'), true);
        });
    });

    // Store.has()
    describe('.has()', function() {
        it('should check if a value exists or not', function() {
            store.set('hasThis', 0);

            assert.isTrue(store.has('hasThis'));
            assert.isFalse(store.has('dontHaveThis'));
        });
    });

    // Store.delete()
    describe('.delete()', function() {
        it('should remove a value and pass it back', function() {
            store.set('removal', -8);
            var result = store.delete('removal');

            assert.isUndefined(store.get('removal'), 'value has been removed');
            assert.equal(result, -8);
        });
    });

    // Store.drop()
    describe('.drop()', function() {
        it('should empty the whole database', function() {
            store.set('removal', { key: 'value' });
            store.drop();

            assert.equal(store.get('removal'), undefined);
        });
    });
});
